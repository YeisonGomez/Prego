{
  "name": "cordova-uglify",
  "version": "0.2.4",
  "description": "Cordova hook that allows you to uglify or minify your apps JavaScript and CSS.",
  "homepage": "https://github.com/rossmartin/cordova-uglify",
  "keywords": [
    "cordova",
    "uglify",
    "minify",
    "hook",
    "hooks"
  ],
  "dependencies": {
    "clean-css": "3.4.8",
    "imagemin": "3.2.0",
    "ng-annotate": "0.15.4",
    "shelljs": "^0.7.0",
    "uglify-js": "2.4.14"
  },
  "author": {
    "name": "Ross Martin"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/rossmartin/cordova-uglify/issues"
  },
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "https://github.com/rossmartin/cordova-uglify"
  },
  "scripts": {
    "postinstall": "node scripts/install.js",
    "postuninstall": "node scripts/uninstall.js"
  },
  "readme": "# cordova-uglify\n\nCordova hook that allows you to uglify or minify your apps JavaScript and CSS.  It is using [UglifyJS2](https://github.com/mishoo/UglifyJS2) for JavaScript compression and [clean-css](https://github.com/GoalSmashers/clean-css) to minify CSS.  The hook also supports compressing your apps images using [imagemin](https://github.com/imagemin/imagemin).\n\n## Install\nInstall the following package below inside of your apps root folder.\n```\nnpm install cordova-uglify --legacy-bundling\n```\nAfter install an `after_prepare` folder will be added to your `hooks` folder with the `uglify.js` script in it.  A JSON config file (`uglify-config.json`) for the script will be added to the `hooks` folder.  The hook will automatically be given executable permission.\n\n## Usage\nOnce you have this hook installed it will compress your apps JavaScript and CSS when you run a `cordova prepare <platform>` or `cordova build <platform>` command.  This hook does not change your assets that live in the root www folder; it will uglify the assets that get output to the platforms folder after a `prepare` or `build`.  By default the hook will uglify the JavaScript and minify CSS files by recursively searching the folders provided in the `foldersToProcess` in the `uglify-config.json` (relative to your project root directory).  You can disable the recursive search by setting the `recursiveFolderSearch` to `false` in the JSON config file.  If you want to process files only when building/preparing for release include `--release` in your CLI command like this - `cordova prepare ios --release`.  Please see the note below about usage with Ionic 2.\n\n## Configuration\n```javascript\n{\n  \"alwaysRun\": false, // set to true to always uglify files\n  \"recursiveFolderSearch\": true, // process all JS and CSS files found in foldersToProcess\n  \"foldersToProcess\": [ // when recursiveFolderSearch is set to false only files in these directories will be processed\n    \"js\",\n    \"css\",\n    \"img\",\n    \"build\" // this is needed for Ionic 2 projects\n  ],\n  \"uglifyJsOptions\": { // pass options to UglifyJS2 (you can include more than these below)\n    \"compress\": {\n      \"drop_console\": true\n    },\n    \"fromString\": true,\n    \"mangle\": true // set this to false for Ionic 2 projects\n  },\n  \"cleanCssOptions\": { // pass options to CleanCSS (you can include more than these below)\n    \"noAdvanced\": true,\n    \"keepSpecialComments\": 0\n  },\n  \"imageminOptions\": { // pass options to imagemin (you can include more than these below)\n    \"jpeg\": {\n      \"progressive\": true,\n      \"arithmetic\": false\n    },\n    \"png\": {\n      \"optimizationLevel\": 2\n    },\n    \"gif\": {\n      \"interlaced\": false\n    },\n    \"svg\": {\n      \"pretty\": false\n    }\n  }\n}\n```\n\n## Using cordova-uglify with Ionic 2\nIonic 2 projects require a couple changes to the `uglify-config.json`.\n* Add `build` to the `foldersToProcess` property.\n* Set `mangle` to `false` in the `uglifyJsOptions`.\n\n## Requirements\nOut of the box this hook requires Cordova 3.3.1-0.4.2 and above but it can work with versions 3.0.0 thru 3.3.0 if you manually indicate the path for the platforms directories on Android and iOS.  This is because the `CORDOVA_PLATFORMS` environment variable was not added until version 3.3.1-0.4.2 ([see this post by Dan Moore](http://www.mooreds.com/wordpress/archives/1425)).\n\n## Future Development\n* HTML compression\n\n## License\n[MIT](https://github.com/rossmartin/cordova-uglify/blob/master/LICENSE)\n",
  "_id": "cordova-uglify@0.2.4",
  "dist": {
    "shasum": "101fd29303390c6d61f24f2dc49480041f5a4f7b"
  },
  "_from": "cordova-uglify@",
  "_resolved": "https://registry.npmjs.org/cordova-uglify/-/cordova-uglify-0.2.4.tgz"
}
